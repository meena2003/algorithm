package org.example.programmers;

/**
 * 처음에 복잡하게 생각해서 정말 어려웠던 문제.
 * 하지만 로직을 간단히 분석하면 쉽게 풀릴 수 있다.
 *
 * 그리디 알고리즘.
 * 즉 매 순간순간 가장 최적의 선택을 하면 된다.
 * 다시 덪칠해야 하는 모든 공간을 최적으로 다시 칠하려면,
 * 복잡하게 생각할 것 없이 그냥 처음부터 차례차례 칠하면 된다.
 * 그리고 조건에 따라서 시작 인덱스를 바꿔주기만 하면 된다.
 *
 * 내가 고민했던 부분 중 하나가 반복문을 어떻게 설정하냐였다.
 * while(), for()문으로 어떻게 해야 종료 조건을 맞출 수 있을까 고민했다.
 * 정답은, 칠해야 하는 부분이 모두 충족되면 된다.
 * 즉 for each 문으로 section[] 원소들을 하나씩 꺼내서 모든 조건을 통과하면 된다.
 * 왜 이리 복잡하게 생각했을까.
 */
public class Lv_1_OverlayPainter {
    public static void main(String[] args) {

    }

    /*
        테스트 1 〉	통과 (1.15ms, 91.8MB)
        테스트 2 〉	통과 (2.46ms, 77.2MB)
        테스트 3 〉	통과 (0.89ms, 83.5MB)
        테스트 4 〉	통과 (0.04ms, 83.7MB)
        테스트 5 〉	통과 (0.90ms, 87.4MB)
        테스트 6 〉	통과 (0.02ms, 73.3MB)
        테스트 7 〉	통과 (0.04ms, 78.7MB)
        테스트 8 〉	통과 (0.61ms, 76.3MB)
        테스트 9 〉	통과 (0.03ms, 74.1MB)
        테스트 10 〉	통과 (0.73ms, 83.4MB)
        테스트 11 〉	통과 (0.03ms, 81MB)
        테스트 12 〉	통과 (0.86ms, 86MB)
        테스트 13 〉	통과 (1.47ms, 87.2MB)
        테스트 14 〉	통과 (1.23ms, 86MB)
        테스트 15 〉	통과 (0.02ms, 79.1MB)
        테스트 16 〉	통과 (0.49ms, 75.6MB)
        테스트 17 〉	통과 (0.94ms, 78.1MB)
        테스트 18 〉	통과 (0.03ms, 79MB)
        테스트 19 〉	통과 (0.93ms, 80.6MB)
        테스트 20 〉	통과 (0.59ms, 79.1MB)
        테스트 21 〉	통과 (1.37ms, 81.6MB)
        테스트 22 〉	통과 (0.99ms, 74.3MB)
        테스트 23 〉	통과 (1.00ms, 78.7MB)
        테스트 24 〉	통과 (0.03ms, 71.1MB)
        테스트 25 〉	통과 (0.93ms, 80.2MB)
        테스트 26 〉	통과 (0.73ms, 82MB)
        테스트 27 〉	통과 (0.32ms, 78.1MB)
        테스트 28 〉	통과 (0.03ms, 73.9MB)
        테스트 29 〉	통과 (0.02ms, 75.4MB)
        테스트 30 〉	통과 (0.02ms, 73.3MB)
        테스트 31 〉	통과 (0.06ms, 74.8MB)
        테스트 32 〉	통과 (0.05ms, 77MB)
        테스트 33 〉	통과 (0.04ms, 73MB)
        테스트 34 〉	통과 (0.03ms, 74.6MB)
        테스트 35 〉	통과 (1.32ms, 78.2MB)
        테스트 36 〉	통과 (0.02ms, 75.9MB)
        테스트 37 〉	통과 (0.50ms, 82.8MB)
        테스트 38 〉	통과 (0.03ms, 74.6MB)
        테스트 39 〉	통과 (0.95ms, 73.5MB)
        테스트 40 〉	통과 (0.03ms, 72.7MB)
        테스트 41 〉	통과 (1.56ms, 80.1MB)
        테스트 42 〉	통과 (0.03ms, 70.9MB)
        테스트 43 〉	통과 (0.04ms, 73.6MB)
        테스트 44 〉	통과 (0.04ms, 82.4MB)
        테스트 45 〉	통과 (1.10ms, 79.6MB)
        테스트 46 〉	통과 (0.26ms, 76.1MB)
        테스트 47 〉	통과 (1.11ms, 80.9MB)
        테스트 48 〉	통과 (0.46ms, 77.6MB)
        테스트 49 〉	통과 (0.68ms, 76.7MB)
        테스트 50 〉	통과 (0.98ms, 79.2MB)
     */
    public static int solution(int n, int m, int[] section) {

        int answer = 0;

        // 가장 왼쪽 부분부터 칠한다.
        int start = section[0];

        // 최소 한 번은 칠했다.
        answer++;

        // 보수해야 하는 부분을 차례대로 꺼낸다.
        for (int target : section) {
            // 해당 부분이 한 번의 붓칠로 커버가 되는지 확인한다.
            if (start + m > target) {
                continue;
            }

            // 커버가 안될 경우엔 다시 시작 인덱스를 바꿔준다.
            start = target;
            // 칠하는 개수를 증가시킨다.
            answer++;
        }

        return answer;
    }
}
