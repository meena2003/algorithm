package org.example.programmers.Lv_2;

/**
 * 결과적으로 다른 사람의 코드를 보고 풀었다.
 * 엄청 어려운 로직은 아니었지만, 역시 원리를 파악하는 게 핵심인 것 같다.
 * 어떻게 구현하느냐 보다, 문제 상황이 있을 때 어떻게 특징과 원리를 파악하고 규칙을 발견하는지가 관건인 것 같다.
 * 이건 천재성보다 많은 노력에 의한 경험이지 않을까.
 * 그런 의미에서 한 번에 못 풀었다고 너무 상심할 필요도 없다고 생각한다.
 *
 * 여기서 관건은 반복문이 끝나는 지점에 대한 통찰이다.
 * 즉 두 플레이어가 만나는 지점은, 두 플레이어의 위치(숫자)의 차이가 1이 날때다.
 * a, b 어떤 수가 더 큰지 모르니 절대값으로 두 수의 차이가 1이 나지 않으면 계속 반복문을 돌린다.
 * 그리고 토너먼트의 한 라운드가 끝났을 땐 다음 순위로 올라가는 로직으로 +1 / 2를 한다.
 * 예를 들어, 1과 2의 승자는 그 다음 라운드의 1이 되고, 3, 4의 승자는 다음 라운드의 2가 된다.
 * 이 규칙을 적용하면 두 수에게 1씩 더한 뒤 나누기 2를 하면 다음 라운드의 승자 위치가 된다.
 *
 * 한 가지 더 고려해야 할 점은, 하나의 라운드에서 차이가 1이 난다고 무조건 상대가 아니라는 점이다.
 * 2와 3의 차이는 1이지만, 두 선수는 같은 대결을 벌이지 않는다.
 * 따라서 두 수의 나누기 값이 동일하다는 조건을 하나 더 추가해야 한다.
 * 그래서 차이가 1이 아니거나, 같은 경기장에 없으면 라운드를 하나 추가해준다.
 */
public class Lv_2_PredictedBracket {
    public static void main(String[] args) {
        solution(4, 2, 3);
    }

    /*
        테스트 1 〉	통과 (0.03ms, 81.6MB)
        테스트 2 〉	통과 (0.03ms, 76.6MB)
        테스트 3 〉	통과 (0.03ms, 71.3MB)
        테스트 4 〉	통과 (0.03ms, 77MB)
        테스트 5 〉	통과 (0.03ms, 66.3MB)
        테스트 6 〉	통과 (0.03ms, 79.5MB)
        테스트 7 〉	통과 (0.03ms, 74.3MB)
        테스트 8 〉	통과 (0.03ms, 72.2MB)
        테스트 9 〉	통과 (0.02ms, 74.9MB)
        테스트 10 〉	통과 (0.03ms, 65.4MB)
        테스트 11 〉	통과 (0.04ms, 73.9MB)
        테스트 12 〉	통과 (0.03ms, 82.1MB)
        테스트 13 〉	통과 (0.04ms, 73.5MB)
        테스트 14 〉	통과 (0.04ms, 67.6MB)
        테스트 15 〉	통과 (0.11ms, 74.7MB)
        테스트 16 〉	통과 (0.04ms, 74.3MB)
        테스트 17 〉	통과 (0.03ms, 77.5MB)
        테스트 18 〉	통과 (0.03ms, 70.5MB)
        테스트 19 〉	통과 (0.06ms, 76MB)
        테스트 20 〉	통과 (0.04ms, 74.5MB)
        테스트 21 〉	통과 (0.04ms, 77.5MB)
        테스트 22 〉	통과 (0.03ms, 84.3MB)
        테스트 23 〉	통과 (0.04ms, 73.3MB)
        테스트 24 〉	통과 (0.06ms, 69.3MB)
        테스트 25 〉	통과 (0.04ms, 74.9MB)
        테스트 26 〉	통과 (0.04ms, 75MB)
        테스트 27 〉	통과 (0.10ms, 78.2MB)
        테스트 28 〉	통과 (0.03ms, 84.1MB)
        테스트 29 〉	통과 (0.05ms, 76.4MB)
        테스트 30 〉	통과 (0.03ms, 70.5MB)
        테스트 31 〉	통과 (0.02ms, 81.5MB)
        테스트 32 〉	통과 (0.03ms, 78.4MB)
        테스트 33 〉	통과 (0.05ms, 76.9MB)
        테스트 34 〉	통과 (0.03ms, 74.1MB)
     */
    public static int solution(int n, int a, int b) {
        int answer = 1;

        while (((a + 1) / 2 != (b + 1) / 2) || Math.abs(a - b) != 1) {
            a = (a + 1) / 2;
            b = (b + 1) / 2;

            answer++;
        }

        return answer;
    }
}
